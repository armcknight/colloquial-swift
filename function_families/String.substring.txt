# jq '.declarations.extension.parsed[] | select(.identifier=="String") | .declarations | .function.parsed[].identifier' observations/*.json | sort | uniq -c | sort -r | grep -i substring

  13 "substring(from: Int) -> String"
  12 "substring(to: Int) -> String"
   3 "substring(with range: Range<Int>) -> String"
   3 "substring(to index: Int) -> String"
   3 "substring(start: Int, end: Int) -> String"
   3 "substring(from index: Int) -> String"
   3 "subString(startIndex: Int, length: Int) -> String"
   3 "count(_ substring: String) -> Int"
   2 "substringWithRange(range: NSRange) -> String"
   2 "substringToIndex(to: Int) -> String"
   2 "substringFromIndex(from: Int) -> String"
   2 "substring(with r: Range<Int>) -> String"
   2 "substring(from: Int, length: Int) -> String"
   2 "subString(_ str: String) -> Bool"
   2 "isStartWith(_ substrings: [String]) -> Bool"
   2 "isStartWith(_ substrings: String...) -> Bool"
   2 "isInclude(_ substrings: [String]) -> Bool"
   2 "isInclude(_ substrings: String...) -> Bool"
   2 "isExlude(_ substrings: [String]) -> Bool"
   2 "isExlude(_ substrings: String...) -> Bool"
   2 "isEndWith(_ substrings: [String]) -> Bool"
   2 "isEndWith(_ substrings: String...) -> Bool"
   2 "insertSubString(_ index: Int, _ string: String) -> String"
   2 "fittingSubstring(_ width: CGFloat, font: UIFont) -> String"
   1 "zap_substring(with range: NSRange) -> String"
   1 "underLined(substring: String? = default) -> NSAttributedString"
   1 "substringed(from index: Int) -> String"
   1 "substringWithIntRange(range: Range<Int>) -> String"
   1 "substringTo(index: Int) -> String"
   1 "substringTo(i: Int) -> String"
   1 "substringTo(_ index: Int) -> String"
   1 "substringSeparatedBy(separator: String) -> String?"
   1 "substringFromNSRange(_ nsRange: NSRange) -> String"
   1 "substringFrom(index: Int) -> String"
   1 "substringFrom(i: Int) -> String"
   1 "substringFrom(_ index: Int, toIndex to: Int) -> String"
   1 "substringFrom(_ index: Int, length len: Int) -> String"
   1 "substringFrom(_ index: Int) -> String"
   1 "substringAt(index: Int) -> String?"
   1 "substring(withValue r: Range<Int>) -> String"
   1 "substring(with: Range<Int>) -> String"
   1 "substring(with range: Range<IndexDistance>) -> String?"
   1 "substring(with range: NSRange) -> String"
   1 "substring(with range: CountableClosedRange<Int>) -> String"
   1 "substring(with nsrange: NSRange) -> String?"
   1 "substring(with nsRange: NSRange) -> String"
   1 "substring(toValue: Int) -> String"
   1 "substring(to: IndexDistance) -> String?"
   1 "substring(to string: String) -> String?"
   1 "substring(to i: Int) -> String?"
   1 "substring(to character: Character) -> String"
   1 "substring(startIndex: Int, length: Int) -> String"
   1 "substring(start: String, end: String) -> String?"
   1 "substring(start: String) -> String?"
   1 "substring(start: Int, length: Int) -> String"
   1 "substring(start: Int) -> String"
   1 "substring(start: Index, end: Index) -> String"
   1 "substring(start: Index) -> String"
   1 "substring(range: Range<Int>) -> String"
   1 "substring(range: NSRange) -> String?"
   1 "substring(pattern: String, options: NSRegularExpression.Options = default) -> String?"
   1 "substring(location: Int, length: Int) -> String!"
   1 "substring(length: Int, to: Int?) -> String"
   1 "substring(fromValue: Int) -> String"
   1 "substring(from: Int?, to: Int?) -> String"
   1 "substring(from: Int?, length: Int) -> String"
   1 "substring(from: Int, to: Int) -> String?"
   1 "substring(from: Int, length: Int) -> String?"
   1 "substring(from: Int, _ to: Int) -> String"
   1 "substring(from: IndexDistance) -> String?"
   1 "substring(from string: String) -> String?"
   1 "substring(from startIndex: Int, to endIndex: Int) -> String"
   1 "substring(from start: Int, to end: Int) -> String?"
   1 "substring(from i: Int, length: Int) -> String?"
   1 "substring(from i: Int) -> String?"
   1 "substring(from character: Character) -> String"
   1 "substring(end: String) -> String?"
   1 "substring(end: Int) -> String"
   1 "substring(end: Index) -> String"
   1 "substring(beginIndex: Int, length: Int) -> String"
   1 "substring(beginIndex: Int, endIndex: Int) -> String"
   1 "substring(_ startIndex: Int, length: Int) -> String"
   1 "substring(_ lower: IndexDistance, _ range: IndexDistance) -> String?"
   1 "substring(_ from: Int) -> String"
   1 "subTo(_ indexOrSubstring: Any) -> String"
   1 "subStringWithRange(aRange: Range<Int>) -> String"
   1 "subStringReverseFindToEnd(str: String) -> String?"
   1 "subStringBetweenStringsReverse(first: String, second: String) -> String?"
   1 "subStringBetweenStrings(first: String, second: String, firstInclude: Bool, secondInclude: Bool) -> String?"
   1 "subStringBetweenSecondToFirst(first: String, second: String) -> String?"
   1 "subString(to: Int) -> String"
   1 "subString(to index: Int) -> String?"
   1 "subString(startIndex: Int, length: Int = default) -> String"
   1 "subString(start: Int, length: Int = default) -> String"
   1 "subString(from: Int, to: Int) -> String?"
   1 "subString(from: Int, to: Int) -> String"
   1 "subString(from range: FoundationRange) -> String?"
   1 "subString(from index: Int) -> String?"
   1 "subString(endIndex: Int) throws -> String"
   1 "subString(beginIndex: Int, endIndex: Int) throws -> String"
   1 "subString(beginIndex: Int) throws -> String"
   1 "subString(_ startIndexx: Int, length: Int) -> String"
   1 "subFrom(_ indexOrSubstring: Any) -> String"
   1 "sk4SubstringWithRange(start: Int, end: Int) -> String"
   1 "sk4SubstringWithRange(range: Range<Int>) -> String"
   1 "sk4SubstringToIndex(index: Int) -> String"
   1 "sk4SubstringFromIndex(index: Int) -> String"
   1 "replacing(_ substring: String, with newString: String) -> String"
   1 "removeSubStringBetweenStrings(first: String, second: String)"
   1 "rangesOfSubstring(string: String) -> Array<NSRange>"
   1 "rangeOfAllSubstrings(str: String) -> [Range<String.Index>]!"
   1 "rangeOfAllBetweenSubstrings(first: String, second: String, firstInclude: Bool, secondInclude: Bool, first2: String? = default) -> [Range<String.Index>]!"
   1 "prettyContainsIgnoringCase(_ substring: String) -> Bool"
   1 "prettyContains(_ substring: String) -> Bool"
   1 "positionOfSubstring(_ subString: String, caseInsensitive: Bool = default, fromEnd: Bool = default) -> Int"
   1 "omSubString(from: Int = default, to: Int)"
   1 "omGetAttributes(color: [(color: UIColor, subString: String?)]? = default, font: [(font: UIFont, subString: String?)]? = default, underlineStyle: [String]? = default, strikethroughStyle: [String]? = default, lineSpacing: CGFloat? = default)"
   1 "omCount(of subString: String, caseSensitive: Bool = default) -> Int"
   1 "occurrences(of substring: String) -> Int"
   1 "makeSubstringColor(_ text: String, color: UIColor) -> NSAttributedString"
   1 "location(substring: String) -> Int"
   1 "jjs_subStringBeforeFirstSeparator(separator: String?) -> String?"
   1 "jjs_subStringAfterFirstSeparator(separator: String?) -> String?"
   1 "insertSubString(index: Int, _ string: String) -> String"
   1 "indexOf(_ substring: String) -> Int?"
   1 "iawSubstring(_ from: Int) -> String"
   1 "hyb_substring(location: Int, length: Int) -> String?"
   1 "hyb_location(substring: String) -> Int"
   1 "hyb_isContain(substring: String) -> Bool"
   1 "cs_indexOfSubString(_ tString: String) -> Int"
   1 "cpk_substring(with range: Range<String.Index>) -> String"
   1 "cpk_substring(to index: String.Index) -> String"
   1 "cpk_substring(from index: String.Index) -> String"
   1 "contains(substring: String) -> Bool"
   1 "contains(subString: String) -> Bool"
   1 "contains(_ substring: String) -> Bool"
   1 "colorSubString(_ subString: String, color: UIColor)"
   1 "beginsWith(_ inSubstring: String) -> Bool"
