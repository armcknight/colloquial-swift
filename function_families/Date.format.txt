# jq '.declarations.extension.parsed[] | select(.identifier=="Date") | .declarations | .function.parsed[].identifier' observations/*.json | grep -vi today | sort | uniq -c | sort -r | grep -i format

   6 "toString(format: String) -> String"
   4 "timeString(ofStyle style: DateFormatter.Style = default) -> String"
   4 "dateTimeString(ofStyle style: DateFormatter.Style = default) -> String"
   4 "dateString(ofStyle style: DateFormatter.Style = default) -> String"
   3 "getTimeInShortFormat() -> String"
   3 "getTimeInFullFormat() -> String"
   3 "formateBirthDate() -> String"
   2 "toString(dateStyle: DateFormatter.Style = default, timeStyle: DateFormatter.Style = default) -> String"
   2 "toString(_ format: DateFormat, timeZone: TimeZone = default) -> String"
   2 "toString(_ dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style, doesRelativeDateFormatting: Bool = default, timeZone: Foundation.TimeZone = default, locale: Locale = default) -> String"
   2 "timeAgo(since date: Date, format: DateAgoFormat) -> String?"
   2 "string(withFormat format: String) -> String"
   2 "string(withFormat format: String = default) -> String"
   2 "sharedDateFormatters() -> [String : DateFormatter]"
   2 "logicLocalizedString(fromFormat format: String, withValue value: Int) -> String"
   2 "getStringDate(_ formate: String) -> String"
   2 "getLocaleFormatUnderscores(withValue value: Int) -> String"
   2 "formatter(_ format: String = default, timeZone: Foundation.TimeZone = default, locale: Locale = default) -> DateFormatter"
   2 "formatter(_ dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style, doesRelativeDateFormatting: Bool, timeZone: Foundation.TimeZone = default, locale: Locale = default) -> DateFormatter"
   2 "formattedDate(withStyle style: DateFormatter.Style, timeZone: TimeZone, locale: Locale) -> String"
   2 "formattedDate(withStyle style: DateFormatter.Style, timeZone: TimeZone) -> String"
   2 "formattedDate(withStyle style: DateFormatter.Style, locale: Locale) -> String"
   2 "formattedDate(withStyle style: DateFormatter.Style) -> String"
   2 "formattedDate(withFormat format: String, timeZone: TimeZone, locale: Locale) -> String"
   2 "formattedDate(withFormat format: String, timeZone: TimeZone) -> String"
   2 "formattedDate(withFormat format: String, locale: Locale) -> String"
   2 "formattedDate(withFormat format: String) -> String"
   2 "description(dateSeparator: String = default, usFormat: Bool = default, nanosecond: Bool = default) -> String"
   2 "convertTo(DateFormat toFormat: String) -> String"
   1 "vcStringWithFormatForUTCTimezone(dateFormat: String) -> String"
   1 "vcStringWithFormatForCurrentTimezone(dateFormat: String) -> String"
   1 "vcStringWithFormat(dateFormat: String, timezoneName: String) -> String"
   1 "toStringWithFormat(format: String) -> String"
   1 "toStringWith(_ dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style) -> String"
   1 "toString(withFormat format: String) -> String"
   1 "toString(with format: String) -> String"
   1 "toString(using format: String) -> String"
   1 "toString(formatter: DateFormatter) -> String"
   1 "toString(format: String, locale: Locale = default) -> String"
   1 "toString(format: String = default, locale: Locale? = default) -> String"
   1 "toString(format: DateFormatType, timeZone: TimeZoneType = default, locale: Locale = default) -> String"
   1 "toString(dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style, isRelative: Bool = default, timeZone: Foundation.TimeZone = default, locale: Locale = default) -> String"
   1 "toString(dateStyle: DateFormatter.Style = default, timeStyle: DateFormatter.Style = default, locale: Locale = default) -> String"
   1 "toString(by formate: String) -> String"
   1 "toString(_ format: String) -> String"
   1 "toString(_ dateFormat: String) -> String"
   1 "toString(_ dateFormat: String = default) -> String"
   1 "toStr(dateFormat: String) -> String"
   1 "timeString(in timeStyle: DateFormatter.Style) -> String"
   1 "time(_ dateStyle: DateFormatter.Style = default) -> String"
   1 "string_from(formatter: String?) -> String"
   1 "stringWithFormatterStyle(formatterStyle: String, timeInterval: TimeInterval) -> String"
   1 "stringWithFormat(_ format: String, timeZone: TimeZone? = default) -> String"
   1 "stringWithFormat(_ format: String) -> String"
   1 "stringTodate(from: String, format: String) -> Date"
   1 "stringIn(format: String) -> String"
   1 "stringIn(dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style) -> String"
   1 "stringFromFormat(_ format: String, withValue value: Int) -> String"
   1 "stringFormat(format: DateStirngformatType) -> String"
   1 "string(withStringFormat format: String) -> String"
   1 "string(withFormatString formatString: String) -> String"
   1 "string(withFormat format: DateFormat) -> String"
   1 "string(withDateFormatType formatTypes: [DateFormatType]) -> String"
   1 "string(withDateFormatType formatType: DateFormatType) -> String"
   1 "string(using format: String = default) -> String"
   1 "string(format: String, locale: String? = default) -> String"
   1 "string(format: String) -> String?"
   1 "string(format: String) -> String"
   1 "string(format: String = default, timeZone: TimeZone = default) -> String"
   1 "string(dateStyle: DateFormatter.Style? = default, timeStyle: DateFormatter.Style? = default, locale: String? = default) -> String"
   1 "string(dateStyle: DateFormatter.Style = default, timeStyle: DateFormatter.Style = default) -> String"
   1 "string(dateFormat string: String) -> String"
   1 "string(dateFormat format: String) -> String?"
   1 "shortDateFormat() -> String"
   1 "setDateFromTimeStampe(_ formate: String, timestampe: Double) -> String?"
   1 "parse(_ dateString: String, format: String) -> Date?"
   1 "parse(_ dateStr: String, format: String = default) -> Date"
   1 "omFormatString(_ dateFormat: String = default) -> String"
   1 "nicelyFormattedRelativeTimeToNow() -> String"
   1 "m_toDateString(formatString: String, timezoneAbbr: String, localeIdentifier: String) -> String"
   1 "m_toDasteString(formatString: String, timezone: TimeZone, localeIdentifier: String) -> String"
   1 "longDateFormat() -> String"
   1 "localizedString(format: DateAgoFormat, valueType: DateAgoUnit, value: Int) -> String?"
   1 "localizedString(forFormat format: DateAgoFormat, valueType: DateAgo, value: Int) -> String?"
   1 "getLocaleFormatUnderscoresWithValue(_ value: Double) -> String"
   1 "getDateToString(date: Double, format: String) -> String"
   1 "getDateString(fromMilliseconds millisecs: NSNumber, format: String) -> String"
   1 "getDateFromTimeStampe(_ formate: String, timestampe: String) -> String?"
   1 "getCurrentDate(dateStyle: DateFormatter.Style = default, timeStyle: DateFormatter.Style = default) -> String"
   1 "from(_ string: String, format: String) -> Date?"
   1 "from(_ string: String, format: String = default, timeZone: TimeZone = default) -> Date?"
   1 "formatter(_ format: String) -> DateFormatter"
   1 "formattedWith(_ format: String) -> String"
   1 "formattedWith(_ date: String, currentFormat: String, formatToConvert: String) -> String"
   1 "formattedString(_ format: String? = default) -> String"
   1 "formattYYYYMMDDHHMMSS(dateString: String) -> Date"
   1 "formattDay(dataString: String) -> String"
   1 "formatRelativeTimeDescribe() -> String!"
   1 "format(format: String) -> String"
   1 "format(_ format: String, locale: String? = default) -> String"
   1 "format(_ dateFormat: String) -> String"
   1 "format(_ dateFormat: String = default) -> String"
   1 "date_from(str: String?, formatter: String?) -> Date?"
   1 "dateWith(dateString: String, formatString: String, timeZone: TimeZone) -> Date"
   1 "dateWith(dateString: String, formatString: String) -> Date"
   1 "dateToString(from: Date, format: String) -> String"
   1 "dateToString(format: String) -> String"
   1 "dateStringWithFormate(formate: String) -> String"
   1 "dateString(in dateStyle: DateFormatter.Style) -> String"
   1 "dateString(format: String = default, locale: String = default) -> String"
   1 "dateString(format: String = default) -> String"
   1 "dateString(dateFormat: String = default) -> String"
   1 "dateString(_ format: String = default, timeZone: TimeZone = default) -> String"
   1 "dateFromString(_ dateString: String, withFormat format: String) -> Date?"
   1 "dateFormatterTimeInterval(_ timeInterval: Double, tiemFormatter: String) -> String"
   1 "dateAt(string: String, dateFormat: String = default) -> Date?"
   1 "date(fromString str: String, format: String, timezone: String? = default, locale: Locale? = default) -> Date?"
   1 "date(fromString str: String, dateFormatter formatter: DateFormatter, timezone: String? = default) -> Date?"
   1 "date(from string: String, format: String = default) -> Date?"
   1 "date(dateString: String, formatString: String, timeZone: TimeZone = default) -> Date"
   1 "date(_ dateStyle: DateFormatter.Style = default) -> String"
   1 "csjst_toString(dateFormat: String) -> String"
   1 "cs_stringFromDate(_ dateFormat: String?) -> String"
   1 "convertWith(format: String) -> String"
   1 "convertTo(formatString format: String) -> String"
   1 "convertTo(format: DateFormat) -> String"
   1 "cachedFormatter(_ format: String = default, timeZone: Foundation.TimeZone = default, locale: Locale = default) -> DateFormatter"
   1 "cachedFormatter(_ dateStyle: DateFormatter.Style, timeStyle: DateFormatter.Style, doesRelativeDateFormatting: Bool, timeZone: Foundation.TimeZone = default, locale: Locale = default) -> DateFormatter"