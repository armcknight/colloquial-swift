# jq '.declarations.extension.parsed[] | select(.identifier=="Int") | .declarations | .function.parsed[].identifier' observations/*.json | grep -vi -e random | sort | uniq -c | sort -r | grep -i -e times -e upto -e downto

   2 "upto(_ limit: Int, step: Int = default, closure: (Int) throws -> Void) rethrows"
   2 "upto(_ limit: Int, step: Int = default) -> [Int]"
   2 "upTo(limit: Int, callback: (Int) -> ())"
   2 "upTo(limit: Int, callback: () -> ())"
   2 "times<T>(_ closure: @escaping (Int) throws -> T) rethrows -> [T]"
   2 "times(function: () -> ())"
   2 "times(closure: () -> ())"
   2 "times(callback: (Int) -> ())"
   2 "times(_ closure: (Int) throws -> Void) rethrows"
   2 "times(_ closure: () -> Void)"
   2 "downto(_ limit: Int, step: Int = default, closure: (Int) throws -> Void) rethrows"
   2 "downto(_ limit: Int, step: Int = default) -> [Int]"
   2 "downTo(limit: Int, callback: (Int) -> ())"
   2 "downTo(limit: Int, callback: () -> ())"
   2 "convertToTimeString() -> String"
   1 "upto(_ n: Int, f: (Int) -> ())"
   1 "upTo(limit: Int, function: (Int) -> ())"
   1 "upTo(_ upBound: Int, callback: (Int) -> Void)"
   1 "timesMake<ReturnType>(_ closure: () -> ReturnType) -> [ReturnType]"
   1 "times<V>(do handler: @escaping (Int) -> (V))"
   1 "times<V>(do handler: @escaping () -> (V))"
   1 "times<T>(function: Void -> T)"
   1 "times<T>(function: (Int) -> T)"
   1 "times<T>(_ closure: @escaping (Void) throws -> T) rethrows -> [T]"
   1 "times<T>(_ closure: @escaping () throws -> T) rethrows -> [T]"
   1 "times(run: () -> ())"
   1 "times(function: Void -> Void)"
   1 "times(f: () -> ())"
   1 "times(execute block: @escaping () -> Void)"
   1 "times(_ f: () -> ())"
   1 "times(_ closure: @escaping (Void) throws -> Void) rethrows"
   1 "times(_ closure: @escaping () throws -> Void) rethrows"
   1 "times(_ closure: (Int) -> Void)"
   1 "times(_ callback: (Int) -> Void)"
   1 "roundUpToInteger(divisor: Int) -> Int"
   1 "downto(_ n: Int, f: @escaping (Int) -> ())"
   1 "downTo(limit: Int, function: (Int) -> ())"
   1 "downTo(_ lowBound: Int, callback: (Int) -> Void)"