# jq '.declarations.extension.parsed[] | select(.identifier=="String") | .declarations | .function.parsed[].identifier' observations/*.json | sort | uniq -c | sort -r | grep -i height

  10 "height(withConstrainedWidth width: CGFloat, font: UIFont) -> CGFloat"
   4 "heightWithConstrainedWidth(_ width: CGFloat, font: UIFont) -> CGFloat"
   3 "widthWithConstrainedHeight(height: CGFloat, font: UIFont) -> CGFloat"
   3 "width(withConstraintedHeight height: CGFloat, font: UIFont) -> CGFloat"
   3 "heightWithConstrainedWidth(width: CGFloat, font: UIFont) -> CGFloat"
   2 "width(withConstrainedHeight height: CGFloat, font: UIFont) -> CGFloat"
   2 "heightWithConstrainedWidth(width: CGFloat, font: UIFont) -> CGRect"
   2 "height(_ font: UIFont) -> CGFloat"
   2 "getSizeWithFont(width: CGFloat = default, height: CGFloat = default, font: UIFont) -> CGSize"
   2 "getHeight(maxWidth: CGFloat, font: CGFloat) -> CGFloat"
   1 "yj_width(limitToHeight height: CGFloat, font: UIFont) -> CGFloat"
   1 "yj_height(limitToWidth width: CGFloat, font: UIFont) -> CGFloat"
   1 "widthWithConstrainedHeightSize(_ height: CGFloat, font: UIFont) -> CGSize"
   1 "widthWithConstrainedHeight(_ height: CGFloat, font: UIFont, options: NSStringDrawingOptions = default) -> CGFloat"
   1 "widthWithConstrainedHeight(_ height: CGFloat, font: UIFont) -> CGFloat"
   1 "widthFromBoundedHeight(_ height: CGFloat, font: UIFont) -> CGFloat"
   1 "width(withFont font: UIFont, constrainedHeight height: CGFloat) -> CGFloat"
   1 "width(font: UIFont, boundingHeight: CGFloat) -> CGFloat"
   1 "usedSize(maxWidth: Float, maxHeight: Float, font: UIFont) -> CGSize"
   1 "ts_heightWithConstrainedWidth(_ width: CGFloat, font: UIFont) -> CGFloat"
   1 "toHeight(width: CGFloat, fontSize: CGFloat, maximumNumberOfLines: Int = default) -> CGFloat"
   1 "stringHeightWithFontSize(_ fontSize: CGFloat, width: CGFloat) -> CGFloat"
   1 "sizeWith(fixedHeight: CGFloat, with font: UIFont) -> CGSize"
   1 "omHeight(_ width: CGFloat, font: UIFont, lineBreakMode: NSLineBreakMode? = default)"
   1 "maxFontSize(_ font: UIFont, boundingWidth: CGFloat, maxHeight: CGFloat) -> CGFloat"
   1 "heightWithConstrainedWidthSize(_ width: CGFloat, font: UIFont) -> CGSize"
   1 "heightWithConstrainedWidth(_ width: CGFloat, font: UIFont, options: NSStringDrawingOptions = default) -> CGFloat"
   1 "heightWithConstrained(width: CGFloat, font: UIFont) -> CGFloat"
   1 "heightFromBoundedWidth(_ width: CGFloat, font: UIFont) -> CGFloat"
   1 "heightForWidthWithFont(font: UIFont, width: CGFloat, insets: UIEdgeInsets) -> CGFloat"
   1 "heightForWidth(width: CGFloat, font: UIFont) -> CGFloat"
   1 "height(withFont font: UIFont, constrainedWidth width: CGFloat) -> CGFloat"
   1 "height(with font: UIFont, and width: Width = default) -> CGFloat"
   1 "height(width: CGFloat, font: UIFont, lineBreakMode: NSLineBreakMode?) -> CGFloat"
   1 "height(font: UIFont, boundingWidth: CGFloat) -> CGFloat"
   1 "height(_ width: CGFloat, font: UIFont, lineBreakMode: NSLineBreakMode?)"
   1 "getHeight(font: UIFont, width: CGFloat) -> CGFloat"
   1 "getHeight(font: UIFont, constrainedToSize: CGSize) -> CGFloat"
   1 "estimatedHeight(_ width: CGFloat, font: UIFont) -> CGFloat"
   1 "dts_heightOf(font: UIFont, maxSize: CGSize) -> CGFloat"
   1 "calculateHeight(with width: Float, font: UIFont) -> Float"
   1 "calculateHeight(with constrainedSize: CGSize, font: UIFont) -> Float"
