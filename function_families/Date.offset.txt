# jq '.declarations.extension.parsed[] | select(.identifier=="Date") | .declarations | .function.parsed[].identifier' observations/*.json | grep -vi -e today -e format | sort | uniq -c | sort -r | grep -i -e from -e offset

   5 "years(from date: Date) -> Int"
   5 "weeks(from date: Date) -> Int"
   5 "seconds(from date: Date) -> Int"
   5 "months(from date: Date) -> Int"
   5 "minutes(from date: Date) -> Int"
   5 "hours(from date: Date) -> Int"
   5 "days(from date: Date) -> Int"
   3 "yearsFrom(_ date: Date) -> Int"
   3 "weeksFrom(_ date: Date) -> Int"
   3 "secondsFrom(_ date: Date) -> Int"
   3 "offset(from date: Date) -> String"
   3 "monthsFrom(_ date: Date) -> Int"
   3 "minutesFrom(_ date: Date) -> Int"
   3 "hoursFrom(_ date: Date) -> Int"
   3 "daysFrom(_ date: Date) -> Int"
   2 "years(from date: Date, calendar: Calendar = default) -> Int"
   2 "weeks(from date: Date, calendar: Calendar = default) -> Int"
   2 "seconds(from date: Date) -> Double"
   2 "random(from fromDate: Date = default, upTo toDate: Date = default) -> Date"
   2 "offsetFrom(_ date: Date) -> String"
   2 "months(from date: Date, calendar: Calendar = default) -> Int"
   2 "minutes(from date: Date) -> Double"
   2 "hours(from date: Date) -> Double"
   2 "days(from date: Date, calendar: Calendar = default) -> Int"
   2 "components(_ fromDate: Date) -> DateComponents!"
   2 "all(from date: Date) -> DateComponents"
   1 "transfromIntoTimestampString() -> String"
   1 "transfromIntoTimestamp(with dateString: String) -> TimeInterval"
   1 "transfromIntoDate(with dateString: String) -> Date"
   1 "taransfromIntoTimestampString(with dateString: String) -> String"
   1 "secondsPast(from date: Date) -> TimeInterval"
   1 "offsetFrom(_ date: Date) -> (Int, String)"
   1 "offset(from date: Date, offsetType: DateOffsetType) -> Int"
   1 "minutesFrom(date: Date) -> Int"
   1 "jjs_components(_ fromDate: Date) -> DateComponents!"
   1 "intervalTimeFromCurrentDate(timeInterval: TimeInterval) -> String"
   1 "getMinutes(fromMilliseconds millisecs: NSNumber) -> Int"
   1 "getMessageTimeString(fromMilliSeconds millisecs: NSNumber) -> String"
   1 "getMessageDetailTimeString(fromMilliseconds millisecs: NSNumber) -> String"
   1 "fromString(_ string: String) -> Date?"
   1 "fromNow(unit: NSCalendar.Unit, value: Int) -> Date"
   1 "fromMilliseconds(_ milliseconds: Double?) -> Date?"
   1 "fromMilliseconds(_ milliseconds: Double) -> Date"
   1 "from(year: Int, month: Int, day: Int) -> Date"
   1 "from(msse: Double) -> Date"
   1 "from(_ timestamp: TimeInterval) -> Date"
   1 "from(_ string: String) -> Date?"
   1 "from(_ ISOString: String) -> Date?"
   1 "daysFrom(date: Date) -> Int"
   1 "daysBetween(dateFrom: Date, dateTo: Date) -> Int"
   1 "days(fromDate date: Date) -> Int"
   1 "days(from date: Date, calendar: Calendar? = default) -> Int"
   1 "daySuffix(fromDate date: Date? = default, fromDay day: Int? = default) -> String"
   1 "dateFromXCSString(_ date: String) -> Date?"
   1 "dateFromString(string: String) -> Date"
   1 "dateFromRFC3339String(_ string: String) -> Date?"
   1 "components(_ fromDate: Date) -> DateComponents"
   1 "componentFor(date: Date, type component: DTDateComponent, calendar fromCalendar: Calendar?) -> Int"
   1 "adjust(_ component: DateComponentType, offset: Int) -> Date"
   1 "addOffset() -> Date"
   1 "XCSStringFromDate(_ date: Date) -> String?"